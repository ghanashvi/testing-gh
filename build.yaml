# name: Build Process

# on:
#   repository_dispatch:
#     types: [app-code-change]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout CI Orchestration Repo
#         uses: actions/checkout@v3

#       - name: Clone Source Repository
#         run: |
#           REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
#           git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git $REPO_NAME
#           cd $REPO_NAME
#           git checkout ${{ github.event.client_payload.sha }}

#       - name: Detect Changed Components
#         id: detect-changes
#         run: |
#           cd $REPO_NAME
#           # Create an empty file to store changes
#           touch changes.txt
          
#           # Check if this is the first commit
#           if git rev-parse HEAD~1 &>/dev/null; then
#             # Normal flow - previous commit exists
#             PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
            
#             # Find which directories with Dockerfiles have changed
#             git diff --name-only $PREVIOUS_COMMIT HEAD | grep -o '^[^/]*/[^/]*' | sort | uniq | while read dir; do
#               if [ -f "${dir}/Dockerfile" ]; then
#                 echo "${dir}" >> changes.txt
#               fi
#             done
            
#             # Find which directories with service files have changed
#             git diff --name-only $PREVIOUS_COMMIT HEAD | grep -E '\.(yaml|yml|json)$' | grep -E 'service|deployment|config' | grep -o '^[^/]*/[^/]*' | sort | uniq >> changes.txt
#           else
#             # First-time run - consider all Dockerfiles
#             echo "First-time run detected - processing all components"
            
#             find . -name "Dockerfile" | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
            
#             # Add service files
#             find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) | grep -E 'service|deployment|config' | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
#           fi
          
#           # Get unique entries
#           ALL_CHANGES=$(sort changes.txt | uniq | grep -v '^$')
          
#           # Output the changed services
#           echo "Changed services and configs: $ALL_CHANGES"
#           echo "changed_services<<EOF" >> $GITHUB_OUTPUT
#           echo "$ALL_CHANGES" >> $GITHUB_OUTPUT
#           echo "EOF" >> $GITHUB_OUTPUT

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build and Push Images to Quarantine
#         run: |
#           REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          
#           # Debug: Show what we're working with
#           echo "Changed services from previous step:"
#           echo "${{ steps.detect-changes.outputs.changed_services }}"
          
#           # Loop through each identified service and build/push its Docker image
#           echo "${{ steps.detect-changes.outputs.changed_services }}" | while read SERVICE; do
#             if [ -z "$SERVICE" ]; then
#               continue
#             fi
            
#             if [ -f "$SERVICE/Dockerfile" ]; then
#               echo "Building $SERVICE..."
              
#               SERVICE_NAME=$(echo $SERVICE | cut -d'/' -f2)
#               COMMIT_TAG=\${{ github.event.client_payload.sha }}"
#               FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
              
#               # Build image with tags
#               docker build -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG" \
#               -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG" \
#               \$SERVICE"
              
#               # Push images to Google Artifact Registry in Quarantine Project
#               # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG"
#               # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG"
              
#               echo "Successfully built and pushed $SERVICE_NAME to Quarantine Project"
#             else
#               echo "Warning: $SERVICE/Dockerfile not found. Skipping."
#             fi
#           done


name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          git clone "https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git" "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"

      - name: Detect Changed Docker Components
        id: detect-changes
        run: |
          set -e
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          cd "$REPO_NAME"
          
          CURRENT_COMMIT="${{ github.event.client_payload.sha }}"
          CHANGED_DIRS=""

          # Check if previous commit exists (not first commit)
          if git rev-parse "${CURRENT_COMMIT}^" >/dev/null 2>&1; then
            PREVIOUS_COMMIT=$(git rev-parse "${CURRENT_COMMIT}^")
            echo "Comparing $PREVIOUS_COMMIT -> $CURRENT_COMMIT"
            
            # Detect changed directories containing Dockerfiles
            CHANGED_DIRS=$(git diff --name-only "$PREVIOUS_COMMIT" "$CURRENT_COMMIT" | \
              grep -E '(^|/)(Dockerfile|Dockerfile\..*)$' | xargs -r -I{} dirname {} | sort -u)
              
            # Fallback: detect changes within Dockerfile directories
            if [ -z "$CHANGED_DIRS" ]; then
              DOCKER_DIRS=$(find . \( -name 'Dockerfile' -o -name 'Dockerfile.*' \) | xargs -r dirname | sort -u)
              for DIR in $DOCKER_DIRS; do
                if git diff --name-only "$PREVIOUS_COMMIT" "$CURRENT_COMMIT" -- "$DIR" | grep -q .; then
                  CHANGED_DIRS="$CHANGED_DIRS $DIR"
                fi
              done
            fi
          else
            echo "First commit detected. Building all Dockerfiles."
            CHANGED_DIRS=$(find . \( -name 'Dockerfile' -o -name 'Dockerfile.*' \) | xargs -r dirname | sort -u)
          fi

          # Include root directory if it has a Dockerfile
          if [ -f "Dockerfile" ]; then
            CHANGED_DIRS="$CHANGED_DIRS ."
          fi

          echo "Detected changed directories: $CHANGED_DIRS"
          echo "DOCKER_DIRS_CSV=$(echo $CHANGED_DIRS | xargs | tr ' ' ',')" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Changed Docker Images
        run: |
          set -e
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          COMMIT_TAG="${{ github.event.client_payload.sha }}"
          FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
          IMAGE_REG="us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo"

          CHANGED_DIRS=$(echo "$DOCKER_DIRS_CSV" | tr ',' ' ')
          echo "Directories to build: $CHANGED_DIRS"

          for DIR in $CHANGED_DIRS; do
            [ -z "$DIR" ] && continue

            COMPONENT=$(basename "$DIR")
            [ "$DIR" = "." ] && COMPONENT="$REPO_NAME"

            CD_PATH="$REPO_NAME/$DIR"
            echo "Building $COMPONENT from $CD_PATH"

            cd "$CD_PATH"
            DOCKERFILE=$(find . -maxdepth 1 \( -name 'Dockerfile' -o -name 'Dockerfile.*' \))
            echo "Dockerfile found: $DOCKERFILE"

            if [ -z "$DOCKERFILE" ]; then
              echo "No Dockerfile in $DIR. Skipping."
              cd - > /dev/null
              continue
            fi

            docker build -f "$DOCKERFILE" \
              -t "$IMAGE_REG/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG" \
              -t "$IMAGE_REG/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG" \
              .

            docker push "$IMAGE_REG/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"
            docker push "$IMAGE_REG/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG"

            echo "Successfully built and pushed $REPO_NAME-$COMPONENT"
            cd - > /dev/null
          done

