name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  SERVICE_ACCOUNT:            'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'
  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      built_dockerfiles: ${{ steps.collect.outputs.dockerfiles_json }}
      repo_name:         ${{ steps.vars.outputs.repo_name }}
      commit_tag:        ${{ steps.vars.outputs.commit_tag }}
    steps:
    - uses: actions/checkout@v3
    - name: Clone Source Repository
      id: clone_repo
      run: |
        REPO_FULL="${{ github.event.client_payload.repository }}"
        REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
        git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL.git "$REPO_NAME"
        cd "$REPO_NAME"
        git checkout "${{ github.event.client_payload.sha }}"
        echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"
    - name: Export vars
      id: vars
      run: |
        echo "repo_name=${{ steps.clone_repo.outputs.REPO_NAME }}" >> "$GITHUB_OUTPUT"
        echo "commit_tag=${{ github.event.client_payload.sha }}"   >> "$GITHUB_OUTPUT"
    - name: Resolve base SHA
      id: base
      run: |
        cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          BASE=$(git rev-parse HEAD~1)
        else
          BASE=4b825dc642cb6eb9a060e54bf8d69288fbee4904
          echo "::notice::First run – diffing against empty tree"
        fi
        echo "sha=$BASE" >> "$GITHUB_OUTPUT"
    - name: Detect Changed Docker Components
      id: diff
      uses: tj-actions/changed-files@v46
      with:
        token: ${{ github.token }}
        path:     ${{ steps.clone_repo.outputs.REPO_NAME }}
        base_sha: ${{ steps.base.outputs.sha }}
        sha:      ${{ github.event.client_payload.sha }}
        use_rest_api: false
        files: |
          **/Dockerfile*
    - name: Prepare Docker build list
      run: |
        CHANGED="${{ steps.diff.outputs.all_changed_files }}"
        echo "TARGET_DOCKERFILES=$(echo "$CHANGED" | tr '\n' ' ')" >> "$GITHUB_ENV"
        echo "$CHANGED" | tr '\n' '\n'
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - uses: docker/setup-buildx-action@v2
    - name: Configure Docker for GAR
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
    - name: Build and push images
      run: |
        set -e
        REPO_NAME="${{ steps.vars.outputs.repo_name }}"
        COMMIT_TAG="${{ steps.vars.outputs.commit_tag }}"
        cd "$REPO_NAME"
        : > /tmp/built_dockerfiles.txt
        for DOCKERFILE in ${{ env.TARGET_DOCKERFILES }}; do
          [ -z "$DOCKERFILE" ] && continue
          DIR=$(dirname "$DOCKERFILE")
          COMPONENT=$(basename "$DOCKERFILE" | sed -E 's/^Dockerfile[-\.]?//')
          COMPONENT=${COMPONENT:-default}
          IMAGE_TAG="$REPO_NAME:insecure-$COMMIT_TAG"
          FULL="$QUAR_IMAGE_REGISTRY/$IMAGE_TAG"
          echo "::group::Building $FULL"
          docker build -f "$DOCKERFILE" -t "$FULL" "$DIR"
          docker push "$FULL"
          echo "::endgroup::"
          echo "$DOCKERFILE" >> /tmp/built_dockerfiles.txt
        done
    - name: Collect built Dockerfiles
      id: collect
      run: |
        jq -Rsc 'split("\n")[:-1]' /tmp/built_dockerfiles.txt > /tmp/list.json
        echo "dockerfiles_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"

  scan_gate:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.build.outputs.built_dockerfiles) }}
    steps:
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    - name: Poll for vulnerability scan results
      id: scan
      env:
        REPO_NAME:  ${{ needs.build.outputs.repo_name }}
        COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
        DOCKERFILE: ${{ matrix.dockerfile }}
      run: |
        IMG="$QUAR_IMAGE_REGISTRY/$REPO_NAME:insecure-$COMMIT_TAG"
        
        for i in {1..30}; do
          SCAN_RESULT=$(gcloud artifacts docker images describe "$IMG" --show-package-vulnerability --format=json)
          
          ANALYSIS_STATUS=$(echo "$SCAN_RESULT" | jq -r '.discovery_summary.discovery[0].discovery.analysisStatus')
          
          if [[ "$ANALYSIS_STATUS" == "FINISHED_SUCCESS" ]]; then
            echo "Scan completed successfully."
            break
          elif [[ "$ANALYSIS_STATUS" == "FINISHED_FAILED" ]]; then
            echo "::error::Scan failed"
            exit 1
          else
            echo "Scan still in progress. Waiting..."
            sleep 10
          fi
        done

        if [[ "$ANALYSIS_STATUS" != "FINISHED_SUCCESS" ]]; then
          echo "::error::Scan did not complete within the allocated time"
          exit 1
        fi

        # Check for vulnerabilities
        VULNERABILITIES=$(echo "$SCAN_RESULT" | jq -r '.vulnerability_summary.vulnerabilities')

        if [[ -n "$VULNERABILITIES" && "$VULNERABILITIES" != "null" ]]; then
          echo "::error::Vulnerabilities detected:"
          echo "$VULNERABILITIES" | jq '.'
          exit 1
        else
          echo "No vulnerabilities detected"
        fi

  promote_secure:
    needs: scan_gate
    if: needs.scan_gate.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.build.outputs.built_dockerfiles) }}
    steps:
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - name: Copy & retag clean image
      env:
        REPO_NAME:  ${{ needs.build.outputs.repo_name }}
        COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
        DOCKERFILE: ${{ matrix.dockerfile }}
      run: |
        SRC="$QUAR_IMAGE_REGISTRY/$REPO_NAME:insecure-$COMMIT_TAG"
        DST="$SECURE_IMAGE_REGISTRY/$REPO_NAME:secure-$COMMIT_TAG"
        gcloud artifacts docker images copy "$SRC" --destination="$DST" --quiet
    - name: Push tag to GHCR
      env:
        REPO_NAME:  ${{ needs.build.outputs.repo_name }}
        COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
        DOCKERFILE: ${{ matrix.dockerfile }}
      run: |
        SECURE_IMG="$SECURE_IMAGE_REGISTRY/$REPO_NAME:secure-$COMMIT_TAG"
        GHCR_IMG="ghcr.io/${{ github.repository_owner }}/$REPO_NAME:secure-$COMMIT_TAG"
        docker pull "$SECURE_IMG"
        echo "${{ github.token }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker tag "$SECURE_IMG" "$GHCR_IMG"
        docker push "$GHCR_IMG"