###############################################################################
# Workflow  : Build ➜ Container‑Analysis Scan ➜ Promote
# Parallel  : every changed Dockerfile runs in its own matrix job
###############################################################################
name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

###############################################################################
# Global environment (shared by all jobs)
###############################################################################
env:
  # 🔐 Workload‑Identity Federation
  WORKLOAD_IDENTITY_PROVIDER: projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider
  SERVICE_ACCOUNT:            ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com

  # 📦 Registries
  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1            # docker login host

  # 🔍 Container‑Analysis API
  PROJECT_ID: axial-edition-463510-p5
  LOCATION:   us-central1                      # analysis region

###############################################################################
# Job 1 ─ detect every changed Dockerfile and output as JSON array
###############################################################################
jobs:
  detect_files:
    runs-on: ubuntu-latest
    permissions: { contents: read }

    outputs:
      files_json: ${{ steps.collect.outputs.files_json }}
      commit_sha: ${{ github.event.client_payload.sha }}
      repo_full:  ${{ github.event.client_payload.repository }}

    steps:
      - uses: actions/checkout@v3                     # orchestration repo

      - id: clone                                     # clone application repo
        run: |
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }} app
          cd app
          git checkout "${{ github.event.client_payload.sha }}"

      - id: base                                      # resolve previous commit
        run: |
          cd app
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >>"$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >>"$GITHUB_OUTPUT"
          fi

      - id: changed                                   # list changed Dockerfiles
        uses: tj-actions/changed-files@v46
        with:
          path:   app
          base_sha: ${{ steps.base.outputs.sha }}
          sha:      ${{ github.event.client_payload.sha }}
          use_rest_api: false
          separator: "\n"             # each path on its own line
          files: |
            **/Dockerfile*

      # --> convert newline list → compact JSON array  ["file1","file2"]
      - id: collect
        run: |
          FILES_JSON=$(printf '%s' "${{ steps.changed.outputs.all_changed_files }}" \
                        | jq -R -s -c 'split("\n") | map(select(length>0))')
          echo "files_json=$FILES_JSON" >>"$GITHUB_OUTPUT"
          echo "Detected Dockerfiles: $FILES_JSON"

###############################################################################
# Job 2 ─ build, scan, promote   (one matrix job per Dockerfile)
###############################################################################
  process_image:
    needs: detect_files
    if: needs.detect_files.outputs.files_json != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      fail-fast: false                               # clean images continue
      matrix:
        dockerfile: ${{ fromJson(needs.detect_files.outputs.files_json) }}

    env:
      COMMIT_SHA: ${{ needs.detect_files.outputs.commit_sha }}
      REPO_FULL:  ${{ needs.detect_files.outputs.repo_full }}

    steps:
      - uses: actions/checkout@v3

      # 🔐 authenticate to Google Cloud
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - uses: docker/setup-buildx-action@v2
      - uses: google-github-actions/setup-gcloud@v1

      - name: Docker login (quarantine registry)
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # 📥 clone app repo inside this runner
      - name: Checkout application repo
        run: |
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL app
          cd app
          git checkout "$COMMIT_SHA"

      # 🏗️ build & push the image for this Dockerfile
      - id: build
        env:
          FILE: ${{ matrix.dockerfile }}
        run: |
          set -e
          cd app
          DIR=$(dirname "$FILE")
          COMP=$(basename "$FILE" | sed -E 's/^Dockerfile[-\.]?//')
          COMP=${COMP:-default}
          IMAGE="$QUAR_IMAGE_REGISTRY/$(basename "$(pwd)")-$COMP:insecure-$COMMIT_SHA"
          docker build -f "$FILE" -t "$IMAGE" "$DIR"
          docker push "$IMAGE"
          echo "image=$IMAGE" >>"$GITHUB_OUTPUT"

      # 🔍 scan with Container‑Analysis REST API
      - id: scan
        name: Vulnerability scan
        continue-on-error: true                      # allow conditional promote
        env:
          IMAGE: ${{ steps.build.outputs.image }}
        run: |
          set -e
          TOKEN=$(gcloud auth print-access-token)
          DIGEST=$(gcloud artifacts docker images describe "$IMAGE" \
                     --format='value(image_summary.digest)')
          RESOURCE_URL="https://${IMAGE%%:*}@${DIGEST}"

          API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/occurrences:vulnerabilitySummary"
          SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")

          TOTAL=$(echo "$SUMMARY" | jq '[(.counts // [])[] .totalCount | tonumber] | add')
          if [ "$TOTAL" -gt 0 ]; then
            echo "❌ Vulnerabilities detected for $IMAGE"
            echo "$SUMMARY" | jq '.counts'
            exit 1
          fi
          echo "✅ Image clean" && echo "clean=true" >>"$GITHUB_OUTPUT"

      # 🚀 promote clean image to secure GAR
      - name: Docker login (secure registry)
        if: steps.scan.outcome == 'success'
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - id: promote
        if: steps.scan.outcome == 'success'
        env:
          SRC: ${{ steps.build.outputs.image }}
        run: |
          DST=$(echo "$SRC" \
                 | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" \
                 | sed "s/:insecure-/:secure-/")
          docker pull "$SRC"
          docker tag  "$SRC" "$DST"
          docker push "$DST"
          echo "dst=$DST" >>"$GITHUB_OUTPUT"

      # 📦 push same digest to GHCR
      - name: Push to GHCR
        if: steps.scan.outcome == 'success'
        env:
          DST:        ${{ steps.promote.outputs.dst }}
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
        run: |
          COMPONENT=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_SHA"
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker tag "$DST" "$GHCR"
          docker push "$GHCR"

      # 🛑 mark only this matrix run failed when vulnerabilities exist
      - name: Fail this run if scan failed
        if: steps.scan.outcome == 'failure'
        run: exit 1
