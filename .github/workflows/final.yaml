name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  detect_files:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    outputs:
      files_json: ${{ steps.collect.outputs.files_json }}
      repo_name: ${{ steps.clone.outputs.repo_name }}
      commit_sha: ${{ github.event.client_payload.sha }}

    env:
      WORKLOAD_IDENTITY_PROVIDER: projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider
      SERVICE_ACCOUNT: ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v3

      - id: clone
        name: Clone Application Repo
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"

      - id: changed
        name: Detect Changed Files
        uses: tj-actions/changed-files@v46
        with:
          path: ${{ steps.clone.outputs.repo_name }}
          files: |
            **/Dockerfile
            **/Dockerfile.*
            **/*.py

      - id: collect
        name: Collect Changed Dockerfiles
        run: |
          LIST="${{ steps.changed.outputs.all_changed_files }}"
          FILES_JSON=$(echo "$LIST" | tr ' ' '\n' | jq -R -s -c 'split("\n") | map(select(length>0))')
          echo "files_json=$FILES_JSON" >>"$GITHUB_OUTPUT"
          echo "Detected Dockerfiles: $FILES_JSON"

  process_image:
    runs-on: ubuntu-latest
    needs: detect_files

    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.detect_files.outputs.files_json) }}

    env:
      WORKLOAD_IDENTITY_PROVIDER: projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider
      SERVICE_ACCOUNT: ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com
      QUAR_IMAGE_REGISTRY: us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
      SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
      GAR_LOCATION: us-central1
      PROJECT_ID: axial-edition-463510-p5
      LOCATION: us-central1

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v3

      - name: Clone Application Repo
        run: |
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git app
          cd app
          git checkout "${{ needs.detect_files.outputs.commit_sha }}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build & Push to Quarantine
        run: |
          set -e
          FILE="${{ matrix.file }}"
          IMAGE_NAME=$(basename "$FILE" | sed 's/^Dockerfile-//')
          IMAGE_TAG=insecure-${{ needs.detect_files.outputs.commit_sha }}
          docker build -f "app/$FILE" -t "$QUAR_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" app
          docker push "$QUAR_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

      - name: Scan Image (Placeholder)
        run: |
          echo "Scan step for ${{ matrix.file }} would go here..."
          # Implement scanning tool like Trivy/Clair/Artifact Analysis if needed

      - name: Promote to Secure Repo
        run: |
          IMAGE_NAME=$(basename "${{ matrix.file }}" | sed 's/^Dockerfile-//')
          IMAGE_TAG=insecure-${{ needs.detect_files.outputs.commit_sha }}
          docker pull "$QUAR_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          docker tag "$QUAR_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" "$SECURE_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          docker push "$SECURE_IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
