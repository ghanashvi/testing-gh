name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  SERVICE_ACCOUNT:            'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'
  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      built_images: ${{ steps.collect.outputs.images_json }}
      repo_name:    ${{ steps.clone_repo.outputs.REPO_NAME }}
      commit_tag:   ${{ github.event.client_payload.sha }}
    steps:
    - uses: actions/checkout@v3
    - name: Clone Source Repository
      id: clone_repo
      run: |
        REPO_FULL="${{ github.event.client_payload.repository }}"
        REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
        git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL.git "$REPO_NAME"
        cd "$REPO_NAME"
        git checkout "${{ github.event.client_payload.sha }}"
        echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"
    - name: Detect Changed Docker Components
      id: diff
      uses: tj-actions/changed-files@v46
      with:
        token: ${{ github.token }}
        path:     ${{ steps.clone_repo.outputs.REPO_NAME }}
        files: |
          **/Dockerfile
          **/Dockerfile.*
          **/Dockerfile-*
          **/*.py
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - uses: docker/setup-buildx-action@v2
    - name: Configure Docker for GAR
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
    - name: Build and push images
      run: |
        set -e
        REPO_NAME="${{ steps.clone_repo.outputs.REPO_NAME }}"
        COMMIT_TAG="${{ github.event.client_payload.sha }}"
        cd "$REPO_NAME"
        : > /tmp/built_images.txt
        CHANGED_FILES="${{ steps.diff.outputs.all_changed_files }}"
        TARGET_DOCKERFILES=$(echo "$CHANGED_FILES" | grep -E 'Dockerfile.*')
        for DOCKERFILE in $TARGET_DOCKERFILES; do
          [ -z "$DOCKERFILE" ] && continue
          DIR=$(dirname "$DOCKERFILE")
          COMPONENT=$(basename "$DOCKERFILE" | sed -E 's/^Dockerfile[-\.]?//')
          COMPONENT=${COMPONENT:-default}
          IMAGE_TAG="$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"
          FULL="$QUAR_IMAGE_REGISTRY/$IMAGE_TAG"
          echo "::group::Building $FULL"
          docker build -f "$DOCKERFILE" -t "$FULL" "$DIR"
          docker push "$FULL"
          echo "::endgroup::"
          echo "$FULL" >> /tmp/built_images.txt
        done
    - name: Collect built images
      id: collect
      run: |
        if [ -s /tmp/built_images.txt ]; then
          jq -Rsc 'split("\n")[:-1]' /tmp/built_images.txt > /tmp/list.json
          echo "images_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"
        else
          echo "images_json=[]" >> "$GITHUB_OUTPUT"
        fi

  scan_gate:
    needs: build
    if: needs.build.outputs.built_images != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}
    outputs:
      scan_result: ${{ steps.scan.outputs.result }}
    steps:
    - uses: actions/checkout@v3
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    - name: Poll for vulnerability scan results
      id: scan
      run: |
        IMG="${{ matrix.image }}"
        
        for i in {1..30}; do
          echo "Attempt $i of 30"
          SCAN_RESULT=$(gcloud artifacts docker images describe "$IMG" --show-package-vulnerability --format=json)
          
          if [[ -n "$SCAN_RESULT" ]]; then
            DISCOVERY_STATUS=$(echo "$SCAN_RESULT" | jq -r '.discovery_summary.discovery[0].discovery.analysisStatus')
            
            if [[ "$DISCOVERY_STATUS" == "FINISHED_SUCCESS" ]]; then
              VULNERABILITIES=$(echo "$SCAN_RESULT" | jq -r '.vulnerability_summary.vulnerabilities')
              
              if [[ -n "$VULNERABILITIES" && "$VULNERABILITIES" != "null" ]]; then
                echo "::error::Vulnerabilities detected:"
                echo "$VULNERABILITIES" | jq '.'
                echo "result=failure" >> $GITHUB_OUTPUT
                exit 1
              else
                echo "No vulnerabilities found"
                echo "result=success" >> $GITHUB_OUTPUT
                exit 0
              fi
            elif [[ "$DISCOVERY_STATUS" == "FINISHED_FAILED" ]]; then
              echo "::error::Scan failed to complete successfully"
              echo "result=failure" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "Scan still in progress. Waiting..."
              sleep 10
            fi
          else
            echo "Scan still in progress or no results available. Waiting..."
            sleep 10
          fi
        done

        echo "::error::Scan did not complete within the allocated time"
        echo "result=failure" >> $GITHUB_OUTPUT
        exit 1

  promote_secure:
    needs: [build, scan_gate]
    if: needs.build.outputs.built_images != '[]' && needs.scan_gate.result == 'success' && needs.scan_gate.outputs.scan_result == 'success'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}
    steps:
    - uses: actions/checkout@v3
    - uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account:            ${{ env.SERVICE_ACCOUNT }}
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    - name: Configure Docker for GAR
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
        gcloud auth configure-docker
    - name: Copy & retag clean image
      run: |
        SRC="${{ matrix.image }}"
        DST=$(echo "$SRC" | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" | sed "s/:insecure-/:secure-/")
        docker pull $SRC
        docker tag $SRC $DST
        docker push $DST
    - name: Push tag to GHCR
      env:
        REPO_NAME:  ${{ needs.build.outputs.repo_name }}
        COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
      run: |
        SRC="${{ matrix.image }}"
        COMPONENT=$(echo "$SRC" | sed -E 's/.*\/([^:]+):.*/\1/')
        GHCR_IMG="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_TAG"
        echo "${{ github.token }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker tag "$SRC" "$GHCR_IMG"
        docker push "$GHCR_IMG"
