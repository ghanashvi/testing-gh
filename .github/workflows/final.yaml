################################################################################
# GitHub Actions ‚Äì¬†Build ‚ûú On‚ÄëDemand¬†Scan (fail on ANY vulnerability) ‚ûú Promote
# ---------------------------------------------------------------------------
# 1. Builds only the Dockerfiles that changed and pushes them to the
#    *quarantine* Artifact¬†Registry repo with tag  insecure-<commitSHA>.
# 2. Runs **On‚ÄëDemand Scanning** inside a Cloud‚ÄëSDK Docker container
#    (works even though the GitHub runner‚Äôs gcloud install has components
#    disabled).  The job fails on *any* vulnerability row (LOW‚ÄëCRITICAL).
# 3. If the image is clean, copies the exact digest to the *secure* repo
#    with tag  secure-<commitSHA>, and also pushes the same digest/tag
#    to GitHub Container‚ÄØRegistry (GHCR).
################################################################################
name: Build ‚ûú Scan ‚ûú Promote

on:
  repository_dispatch:
    types: [app-code-change]

###############################################################################
# ------------------------------  Global ENV  ---------------------------------
###############################################################################
env:
  # Workload‚ÄëIdentity Federation (OIDC)
  WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  SERVICE_ACCOUNT:            'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

  # Artifact¬†Registry
  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1       # docker login host/region
  ODS_LOCATION:          us               # On‚ÄëDemand Scan region

  # Polling
  POLL_INTERVAL: 10      # seconds
  MAX_ATTEMPTS:  36      # 36 √ó 10¬†s  ‚âà¬†6¬†minutes

###############################################################################
# JOB¬†1 : Build & push changed Dockerfiles to *quarantine* repo
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }

    outputs:
      built_images: ${{ steps.collect.outputs.images_json }}
      repo_name:    ${{ steps.clone_repo.outputs.REPO_NAME }}
      commit_tag:   ${{ github.event.client_payload.sha }}

    steps:
      # 1Ô∏è‚É£  Checkout orchestration repo (this repo)
      - uses: actions/checkout@v3

      # 2Ô∏è‚É£  Clone the application repo that triggered repository_dispatch
      - name: Clone Source Repository
        id: clone_repo
        run: |
          REPO_FULL="${{ github.event.client_payload.repository }}"
          REPO_NAME="${REPO_FULL#*/}"
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"

      # 3Ô∏è‚É£  Resolve a safe base‚ÄëSHA (empty‚Äëtree hash on first run)
      - id: base
        name: Resolve base SHA
        run: |
          cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >> "$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >> "$GITHUB_OUTPUT"
          fi

      # 4Ô∏è‚É£  Detect only changed Dockerfiles
      - id: diff
        name: Detect changed Dockerfiles
        uses: tj-actions/changed-files@v46
        with:
          token:     ${{ github.token }}
          path:      ${{ steps.clone_repo.outputs.REPO_NAME }}
          base_sha:  ${{ steps.base.outputs.sha }}
          sha:       ${{ github.event.client_payload.sha }}
          use_rest_api: false
          files: |
            **/Dockerfile*

      # 5Ô∏è‚É£  Authenticate to Google¬†Cloud via Workload‚ÄëIdentity Federation
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      # 6Ô∏è‚É£  Enable Buildx and login to Artifact¬†Registry
      - uses: docker/setup-buildx-action@v2
      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # 7Ô∏è‚É£  Build & push each changed Dockerfile as insecure‚Äë<sha>
      - name: Build & Push images
        run: |
          set -e
          REPO="${{ steps.clone_repo.outputs.REPO_NAME }}"
          SHA="${{ github.event.client_payload.sha }}"
          cd "$REPO"
          : > /tmp/built.txt
          for FILE in ${{ steps.diff.outputs.all_changed_files }}; do
            [[ "$FILE" != *Dockerfile* ]] && continue
            DIR=$(dirname "$FILE")
            COMP=$(basename "$FILE" | sed -E 's/^Dockerfile[-\.]?//')
            COMP=${COMP:-default}
            TAG="$REPO-$COMP:insecure-$SHA"
            FULL="$QUAR_IMAGE_REGISTRY/$TAG"
            echo "::group::Building $FULL"
            docker build -f "$FILE" -t "$FULL" "$DIR"
            docker push "$FULL"
            echo "::endgroup::"
            echo "$FULL" >> /tmp/built.txt
          done

      # 8Ô∏è‚É£  Save list of images as JSON (matrix input for next jobs)
      - id: collect
        name: Collect built images
        run: |
          if [ -s /tmp/built.txt ]; then
            jq -Rsc 'split("\n")[:-1]' /tmp/built.txt > /tmp/list.json
            echo "images_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"
          else
            echo "images_json=[]" >> "$GITHUB_OUTPUT"

###############################################################################
# JOB¬†2 : On‚ÄëDemand Scanning (block on ANY vulnerability row)
###############################################################################
  ods_scan:
    needs: build
    if: needs.build.outputs.built_images != '[]'
    runs-on: ubuntu-latest
    permissions: { id-token: write }
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}

    steps:
      # 1Ô∏è‚É£  Minimal checkout so workspace exists (needed for creds file mount)
      - uses: actions/checkout@v3

      # 2Ô∏è‚É£  Authenticate to Google¬†Cloud (creates creds file)
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      # 3Ô∏è‚É£  Run ODS inside Cloud‚ÄëSDK Docker image (component manager enabled)
      - name: ODS scan & gate
        env:
          IMG:            ${{ matrix.image }}
          ODS_LOCATION:   ${{ env.ODS_LOCATION }}
          POLL_INTERVAL:  ${{ env.POLL_INTERVAL }}
          MAX_ATTEMPTS:   ${{ env.MAX_ATTEMPTS }}
          CREDS_PATH:     ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          docker run --rm \
            -e CLOUDSDK_CORE_DISABLE_PROMPTS=1 \
            -e GOOGLE_APPLICATION_CREDENTIALS=/creds.json \
            -v "$CREDS_PATH":/creds.json:ro \
            google/cloud-sdk:latest /bin/bash -c "
              set -e
              echo 'üîç  Scanning $IMG'
              SCAN_ID=\$(gcloud artifacts docker images scan \"$IMG\" \
                           --location='$ODS_LOCATION' --quiet \
                           --format='value(response.scan)')
              echo 'Scan ID:' \$SCAN_ID

              for i in \$(seq 1 $MAX_ATTEMPTS); do
                COUNT=\$(gcloud artifacts docker images list-vulnerabilities \$SCAN_ID \
                          --location='$ODS_LOCATION' \
                          --format='value(name)' | wc -l)
                if [ \"\$COUNT\" -gt 0 ]; then
                  echo '‚ùå  Vulnerabilities detected (rows='\"\$COUNT\"')'
                  gcloud artifacts docker images list-vulnerabilities \$SCAN_ID \
                    --location='$ODS_LOCATION' \
                    --format='table(vulnerability.effectiveSeverity, vulnerability.shortDescription)'
                  exit 1
                fi
                echo '‚è≥  Waiting for scan results‚Ä¶'
                sleep $POLL_INTERVAL
              done

              echo '‚úÖ  No vulnerabilities found'
            "

###############################################################################
# JOB¬†3 : Promote clean images to secure repo & GHCR
###############################################################################
  promote_secure:
    needs: [build, ods_scan]
    if: needs.ods_scan.result == 'success'
    runs-on: ubuntu-latest
    permissions: { id-token: write, packages: write }
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}

    steps:
      # 1Ô∏è‚É£  GCP auth (no credentials file needed for docker copy)
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
          create_credentials_file:    false

      # 2Ô∏è‚É£  Docker login to secure repo host
      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # 3Ô∏è‚É£  Copy digest to secure repo, tag secure‚Äë<sha>
      - id: copy
        name: Copy & tag secure
        run: |
          SRC="${{ matrix.image }}"
          DST=$(echo "$SRC" \
                 | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" \
                 | sed "s/:insecure-/:secure-/")
          gcloud artifacts docker images copy "$SRC" --destination="$DST" --quiet
          echo "dst=$DST" >> "$GITHUB_OUTPUT"

      # 4Ô∏è‚É£  Push same digest/tag to GHCR
      - name: Push to GHCR
        env:
          COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
          DST:        ${{ steps.copy.outputs.dst }}
        run: |
          COMPONENT=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_TAG"
          docker pull "$DST"
          echo "${{ github.token }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
          docker tag "$DST" "$GHCR"
          docker push "$GHCR"
