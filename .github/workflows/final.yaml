################################################################################
# Workflow : Build ➜ On‑Demand Scan (fail on ANY vulnerability) ➜ Promote
################################################################################
name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

###############################################################################
# ----------------------  Project‑wide environment variables  -----------------
###############################################################################
env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  SERVICE_ACCOUNT:            'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1          # docker login host/region
  ODS_LOCATION:          us                  # On‑Demand Scanning region

  POLL_INTERVAL: 10      # seconds between scan‑poll rounds
  MAX_ATTEMPTS:  36      # 36 × 10 s ≈ 6 min

###############################################################################
# JOB 1 ─ Build & push changed Dockerfiles (unchanged except “fi” fix)
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }

    outputs:
      built_images: ${{ steps.collect.outputs.images_json }}
      repo_name:    ${{ steps.clone_repo.outputs.REPO_NAME }}
      commit_tag:   ${{ github.event.client_payload.sha }}

    steps:
      - uses: actions/checkout@v3           # orchestration repo

      - name: Clone Source Repository
        id: clone_repo
        run: |
          REPO_FULL="${{ github.event.client_payload.repository }}"
          REPO_NAME="${REPO_FULL#*/}"
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"

      - id: base
        name: Resolve base SHA
        run: |
          cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >> "$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >> "$GITHUB_OUTPUT"
          fi

      - id: diff
        name: Detect changed Dockerfiles
        uses: tj-actions/changed-files@v46
        with:
          token:     ${{ github.token }}
          path:      ${{ steps.clone_repo.outputs.REPO_NAME }}
          base_sha:  ${{ steps.base.outputs.sha }}
          sha:       ${{ github.event.client_payload.sha }}
          use_rest_api: false
          files: |
            **/Dockerfile*

      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - uses: docker/setup-buildx-action@v2

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build & Push images
        run: |
          set -e
          REPO="${{ steps.clone_repo.outputs.REPO_NAME }}"
          SHA="${{ github.event.client_payload.sha }}"
          cd "$REPO"
          : > /tmp/built.txt
          for FILE in ${{ steps.diff.outputs.all_changed_files }}; do
            [[ "$FILE" != *Dockerfile* ]] && continue
            DIR=$(dirname "$FILE")
            COMP=$(basename "$FILE" | sed -E 's/^Dockerfile[-\.]?//')
            COMP=${COMP:-default}
            TAG="$REPO-$COMP:insecure-$SHA"
            FULL="$QUAR_IMAGE_REGISTRY/$TAG"
            echo "::group::Building $FULL"
            docker build -f "$FILE" -t "$FULL" "$DIR"
            docker push "$FULL"
            echo "::endgroup::"
            echo "$FULL" >> /tmp/built.txt
          done

      - id: collect
        name: Collect built images
        run: |
          if [ -s /tmp/built.txt ]; then
            jq -Rsc 'split("\n")[:-1]' /tmp/built.txt > /tmp/list.json
            echo "images_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"
          else
            echo "images_json=[]" >> "$GITHUB_OUTPUT"
          fi

###############################################################################
# JOB 2 ─ On‑Demand Scan (fail on *any* vulnerability row)
###############################################################################
  ods_scan:
    needs: build
    if: needs.build.outputs.built_images != '[]'
    runs-on: ubuntu-latest
    permissions: { id-token: write }
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}

    steps:
      # Workspace required for credentials file mount
      - uses: actions/checkout@v3

      # Authenticate (Workload‑Identity Federation)
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      # Run scan inside Cloud‑SDK container with ADC creds
      - name: On‑Demand Scan & gate
        env:
          IMG:            ${{ matrix.image }}
          ODS_LOCATION:   ${{ env.ODS_LOCATION }}
          POLL_INTERVAL:  ${{ env.POLL_INTERVAL }}
          MAX_ATTEMPTS:   ${{ env.MAX_ATTEMPTS }}
          CREDS:          ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          PROJECT_ID:     ${{ env.GOOGLE_CLOUD_PROJECT }}
        run: |
          docker run --rm \
            -e CLOUDSDK_CORE_DISABLE_PROMPTS=1 \
            -e GOOGLE_APPLICATION_CREDENTIALS=/creds.json \
            -e CLOUDSDK_CORE_PROJECT=$PROJECT_ID \
            -v "$CREDS":/creds.json:ro \
            google/cloud-sdk:latest /bin/bash -c "
              set -e
              gcloud auth login --quiet --cred-file=/creds.json --brief

              echo '🔍  Scanning $IMG'
              SCAN_ID=\$(gcloud artifacts docker images scan \"$IMG\" \
                          --location='$ODS_LOCATION' \
                          --remote \
                          --quiet \
                          --format='value(response.scan)')
              echo 'Scan ID:' \$SCAN_ID

              for i in \$(seq 1 $MAX_ATTEMPTS); do
                COUNT=\$(gcloud artifacts docker images list-vulnerabilities \$SCAN_ID \
                          --location='$ODS_LOCATION' \
                          --format='value(name)' | wc -l)
                if [ \"\$COUNT\" -gt 0 ]; then
                  echo '❌  Vulnerabilities detected'
                  gcloud artifacts docker images list-vulnerabilities \$SCAN_ID \
                    --location='$ODS_LOCATION' \
                    --format='table(vulnerability.effectiveSeverity, vulnerability.shortDescription)'
                  exit 1
                fi
                echo '⏳  Waiting for results… ('\$i')'
                sleep $POLL_INTERVAL
              done
              echo '✅  No vulnerabilities found'
            "

###############################################################################
# JOB 3 ─ Promote clean images to secure repo + GHCR
###############################################################################
  promote_secure:
    needs: [build, ods_scan]
    if: needs.ods_scan.result == 'success'
    runs-on: ubuntu-latest
    permissions: { id-token: write, packages: write }
    strategy:
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}

    steps:
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
          create_credentials_file:    false

      - name: Docker login (secure repo)
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - id: copy
        name: Copy digest to secure repo
        run: |
          SRC="${{ matrix.image }}"
          DST=$(echo "$SRC" \
                 | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" \
                 | sed "s/:insecure-/:secure-/")
          gcloud artifacts docker images copy "$SRC" --destination="$DST" --quiet
          echo "dst=$DST" >> "$GITHUB_OUTPUT"

      - name: Push tag to GHCR
        env:
          COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
          DST:        ${{ steps.copy.outputs.dst }}
        run: |
          COMPONENT=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_TAG"
          docker pull "$DST"
          echo "${{ github.token }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
          docker tag "$DST" "$GHCR"
          docker push "$GHCR"
