###############################################################################
# Workflow : Build ➜ Container‑Analysis Scan ➜ Promote
###############################################################################
name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

env:
  WORKLOAD_IDENTITY_PROVIDER: projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider
  SERVICE_ACCOUNT:            ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com

  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1

  PROJECT_ID: axial-edition-463510-p5
  LOCATION:   us-central1            # Container‑Analysis region

###############################################################################
# Job 1 : build every changed Dockerfile
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }

    outputs:
      images_json: ${{ steps.collect.outputs.images_json }}
      commit_sha:  ${{ github.event.client_payload.sha }}

    steps:
      - uses: actions/checkout@v3                          # orchestration repo

      # Clone application repo
      - id: clone
        run: |
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }} app
          cd app
          git checkout "${{ github.event.client_payload.sha }}"

      # Base commit
      - id: base
        run: |
          cd app
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >>"$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >>"$GITHUB_OUTPUT"
          fi

      # Detect Dockerfiles (JSON output)
      - id: diff
        uses: tj-actions/changed-files@v46
        with:
          token: ${{ github.token }}
          path:   app
          base_sha: ${{ steps.base.outputs.sha }}
          sha:      ${{ github.event.client_payload.sha }}
          use_rest_api: false
          json: true
          files: |
            **/Dockerfile*

      # Auth & Docker setup
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
      - uses: docker/setup-buildx-action@v2
      - uses: google-github-actions/setup-gcloud@v1
      - run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # ---------- Build & push (iterate via JSON) ------------------------
      - id: buildpush
        run: |
          set -e
          SHA="${{ github.event.client_payload.sha }}"
          cd app
          echo '${{ steps.diff.outputs.all_changed_files_json }}' | \
            jq -r '.[]' > /tmp/dflist.txt

          : > /tmp/images.txt
          for DF in $(cat /tmp/dflist.txt); do
            DIR=$(dirname "$DF")
            COMP=$(basename "$DF" | sed -E 's/^Dockerfile[-\.]?//')
            COMP=${COMP:-default}
            IMAGE="$QUAR_IMAGE_REGISTRY/$(basename "$(pwd)")-$COMP:insecure-$SHA"
            docker build -f "$DF" -t "$IMAGE" "$DIR"
            docker push "$IMAGE"
            echo "$IMAGE" >> /tmp/images.txt
          done

      # Collect images JSON
      - id: collect
        run: |
          jq -Rsc 'split("\n")[:-1]' /tmp/images.txt >images.json
          echo "images_json=$(cat images.json)" >>"$GITHUB_OUTPUT"

###############################################################################
# Job 2 : scan & promote (matrix per image) – unchanged from previous version
###############################################################################
  scan_and_promote:
    needs: build
    if: needs.build.outputs.images_json != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build.outputs.images_json) }}

    env:
      SHA: ${{ needs.build.outputs.commit_sha }}

    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v1
      - uses: docker/setup-buildx-action@v2
      - run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # -- scan -----------------------------------------------------------
      - id: scan
        continue-on-error: true
        env: { IMAGE: ${{ matrix.image }} }
        run: |
          TOKEN=$(gcloud auth print-access-token)
          DIGEST=$(gcloud artifacts docker images describe "$IMAGE" --format='value(image_summary.digest)')
          RESOURCE_URL="https://${IMAGE%%:*}@${DIGEST}"
          API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/occurrences:vulnerabilitySummary"
          SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")
          TOTAL=$(echo "$SUMMARY" | jq '[(.counts // [])[] .totalCount | tonumber] | add')
          [ "$TOTAL" -eq 0 ] && echo "clean=true" >>"$GITHUB_OUTPUT" || { echo "$SUMMARY"|jq '.counts'; exit 1; }

      # -- promote if clean ----------------------------------------------
      - if: steps.scan.outcome == 'success'
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - id: promote
        if: steps.scan.outcome == 'success'
        env: { SRC: ${{ matrix.image }} }
        run: |
          DST=$(echo "$SRC" | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" | sed "s/:insecure-/:secure-/")
          docker pull "$SRC"; docker tag "$SRC" "$DST"; docker push "$DST"
          echo "dst=$DST" >>"$GITHUB_OUTPUT"

      - name: Push to GHCR
        if: steps.scan.outcome == 'success'
        env: { DST: ${{ steps.promote.outputs.dst }}, SHA: ${{ env.SHA }} }
        run: |
          NAME=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$NAME:secure-$SHA"
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker tag "$DST" "$GHCR"; docker push "$GHCR"

      - name: Fail run if scan failed
        if: steps.scan.outcome == 'failure'
        run: exit 1
