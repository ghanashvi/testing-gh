###############################################################################
# Workflow : Build → Scan → Promote (handles every changed Dockerfile)
###############################################################################
name: Build → Scan → Promote

on:
  repository_dispatch:
    types: [app-code-change]

###############################################################################
# Global environment (shared by every job)
###############################################################################
env:
  WORKLOAD_IDENTITY_PROVIDER: projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider
  SERVICE_ACCOUNT:            ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com

  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1

  PROJECT_ID: axial-edition-463510-p5
  LOCATION:   us-central1          # Container Analysis region

###############################################################################
# Job 1 – clone app repo, find changed Dockerfiles, build & push each image
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }

    outputs:
      images_json: ${{ steps.collect.outputs.images_json }}
      commit_sha:  ${{ github.event.client_payload.sha }}

    steps:
      - uses: actions/checkout@v3

      # Clone application repository
      - name: Clone source repository
        id: clone_repo
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }} "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"
          echo "REPO_NAME=$REPO_NAME" >>"$GITHUB_OUTPUT"

      # Resolve previous commit (handles first run)
      - name: Resolve base SHA
        id: base
        run: |
          cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >>"$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >>"$GITHUB_OUTPUT"
          fi

      # Detect changed Dockerfiles (newline separator)
      - name: Detect changed Docker components
        id: detect
        uses: tj-actions/changed-files@v46
        with:
          token:      ${{ github.token }}
          path:       ${{ steps.clone_repo.outputs.REPO_NAME }}
          base_sha:   ${{ steps.base.outputs.sha }}
          sha:        ${{ github.event.client_payload.sha }}
          use_rest_api: false
          separator: "\n"
          files: |
            **/Dockerfile*

      # Prepare build list
      - name: Prepare Dockerfile list
        id: prep
        run: |
          echo "${{ steps.detect.outputs.all_changed_files }}"
          echo "TARGET_DOCKERFILES=$(echo '${{ steps.detect.outputs.all_changed_files }}' | tr '\n' ' ')" >>"$GITHUB_ENV"

      # Authenticate to Google Cloud
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - uses: docker/setup-buildx-action@v2
      - uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Build & push every changed Dockerfile
      - name: Build and push images
        run: |
          set -e
          REPO_DIR="${{ steps.clone_repo.outputs.REPO_NAME }}"
          SHA="${{ github.event.client_payload.sha }}"
          cd "$REPO_DIR"
          > /tmp/images.txt
          for DF in ${{ env.TARGET_DOCKERFILES }}; do
            [ -z "$DF" ] && continue
            DIR=$(dirname "$DF")
            COMP=$(basename "$DF" | sed -E 's/^Dockerfile[-\.]?//')
            COMP=${COMP:-default}
            IMAGE="$QUAR_IMAGE_REGISTRY/$REPO_DIR-$COMP:insecure-$SHA"
            docker build -f "$DF" -t "$IMAGE" "$DIR"
            docker push "$IMAGE"
            echo "$IMAGE" >>/tmp/images.txt
          done

      # Collect image list as JSON
      - id: collect
        name: Collect images
        run: |
          if [ -s /tmp/images.txt ]; then
            jq -Rsc 'split("\n")[:-1]' /tmp/images.txt >list.json
            echo "images_json=$(cat list.json)" >>"$GITHUB_OUTPUT"
          else
            echo "images_json=[]" >>"$GITHUB_OUTPUT"
          fi

###############################################################################
# Job 2 – for each image: scan then (if clean) promote
###############################################################################
  scan_and_promote:
    needs: build
    if: needs.build.outputs.images_json != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build.outputs.images_json) }}

    env:
      SHA: ${{ needs.build.outputs.commit_sha }}

    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v1
      - uses: docker/setup-buildx-action@v2

      - name: Docker login (quarantine)
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Scan image via vulnerabilitySummary API
      - id: scan
        name: Scan image
        continue-on-error: true
        env:
          IMAGE: ${{ matrix.image }}
        run: |
          TOKEN=$(gcloud auth print-access-token)
          DIGEST=$(gcloud artifacts docker images describe "$IMAGE" --format='value(image_summary.digest)')
          RESOURCE_URL="https://${IMAGE%%:*}@${DIGEST}"
          API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/occurrences:vulnerabilitySummary"
          SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")
          TOTAL=$(echo "$SUMMARY" | jq '[(.counts // [])[] .totalCount | tonumber] | add')
          if [ "$TOTAL" -gt 0 ]; then
            echo "Vulnerabilities found in $IMAGE"
            echo "$SUMMARY" | jq '.counts'
            exit 1
          fi
          echo "clean=true" >>"$GITHUB_OUTPUT"

      # Promote clean image
      - name: Docker login (secure)
        if: steps.scan.outcome == 'success'
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - id: promote
        if: steps.scan.outcome == 'success'
        env:
          SRC: ${{ matrix.image }}
        run: |
          DST=$(echo "$SRC" | sed "s|$QUAR_IMAGE_REGISTRY|$SECURE_IMAGE_REGISTRY|" \
                             | sed "s/:insecure-/:secure-/")
          docker pull "$SRC"
          docker tag "$SRC" "$DST"
          docker push "$DST"
          echo "dst=$DST" >>"$GITHUB_OUTPUT"

      - name: Push tag to GHCR
        if: steps.scan.outcome == 'success'
        env:
          DST: ${{ steps.promote.outputs.dst }}
          SHA: ${{ env.SHA }}
        run: |
          NAME=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$NAME:secure-$SHA"
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker tag "$DST" "$GHCR"
          docker push "$GHCR"

      # fail this matrix job when vulnerabilities exist
      - name: Fail if scan failed
        if: steps.scan.outcome == 'failure'
        run: exit 1
