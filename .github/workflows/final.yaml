###############################################################################
# Workflow: Build ➜ Per‑image Scan & Promote
###############################################################################
name: Build ➜ Scan ➜ Promote

on:
  repository_dispatch:
    types: [app-code-change]

###############################################################################
# Global environment
###############################################################################
env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  SERVICE_ACCOUNT:            'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

  QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo
  SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
  GAR_LOCATION:          us-central1            # docker login host

  PROJECT_ID: axial-edition-463510-p5
  LOCATION:   us-central1                      # Container Analysis location

###############################################################################
# Job 1: Build and push changed Dockerfiles
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }

    outputs:
      built_images: ${{ steps.collect.outputs.images_json }}
      commit_tag:   ${{ github.event.client_payload.sha }}

    steps:
      - uses: actions/checkout@v3                       # orchestration repo

      - id: clone_repo                                  # clone application
        run: |
          REPO_FULL="${{ github.event.client_payload.repository }}"
          REPO_NAME="${REPO_FULL#*/}"
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/$REPO_FULL "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"

      - id: base                                        # resolve base SHA
        run: |
          cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >> "$GITHUB_OUTPUT"
          else
            echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >> "$GITHUB_OUTPUT"
          fi

      - id: diff                                        # changed Dockerfiles
        uses: tj-actions/changed-files@v46
        with:
          token: ${{ github.token }}
          path: ${{ steps.clone_repo.outputs.REPO_NAME }}
          base_sha: ${{ steps.base.outputs.sha }}
          sha:      ${{ github.event.client_payload.sha }}
          use_rest_api: false
          files: |
            **/Dockerfile*

      - uses: google-github-actions/auth@v1             # workload‑identity
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - uses: docker/setup-buildx-action@v2             # buildx

      - name: Docker login to quarantine registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and push images                     # push insecure‑<sha>
        run: |
          set -e
          REPO="$(basename "${{ steps.clone_repo.outputs.REPO_NAME }}")"
          SHA="${{ github.event.client_payload.sha }}"
          cd "$REPO"
          > /tmp/built.txt
          for FILE in ${{ steps.diff.outputs.all_changed_files }}; do
            [[ "$FILE" != *Dockerfile* ]] && continue
            DIR=$(dirname "$FILE")
            COMP=$(basename "$FILE" | sed -E 's/^Dockerfile[-\.]?//')
            COMP=${COMP:-default}
            IMAGE="$QUAR_IMAGE_REGISTRY/$REPO-$COMP:insecure-$SHA"
            docker build -f "$FILE" -t "$IMAGE" "$DIR"
            docker push "$IMAGE"
            echo "$IMAGE" >> /tmp/built.txt
          done

      - id: collect                                     # images_json output
        run: |
          if [ -s /tmp/built.txt ]; then
            jq -Rsc 'split("\n")[:-1]' /tmp/built.txt > /tmp/list.json
            echo "images_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"
          else
            echo "images_json=[]" >> "$GITHUB_OUTPUT"
          fi

###############################################################################
# Job 2: Scan each image and promote only when clean
###############################################################################
  scan_and_promote:
    needs: build
    if: needs.build.outputs.built_images != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      fail-fast: false                                   # allow parallel runs
      matrix:
        image: ${{ fromJson(needs.build.outputs.built_images) }}

    steps:
      - uses: actions/checkout@v3                       # workspace

      - uses: google-github-actions/auth@v1             # workload‑identity
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      # --- SCAN STEP --------------------------------------------------------
      - id: scan
        name: Container Analysis vulnerabilitySummary
        continue-on-error: true                         # keep job alive
        env:
          IMG: ${{ matrix.image }}
        run: |
          set -e
          TOKEN=$(gcloud auth print-access-token)

          # obtain digest
          DIGEST=$(gcloud artifacts docker images describe "$IMG" \
                     --format='value(image_summary.digest)')
          [ -z "$DIGEST" ] && { echo "Digest not found"; exit 1; }

          BASE_NO_TAG=${IMG%%:*}
          RESOURCE_URL="https://${BASE_NO_TAG}@${DIGEST}"

          API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/occurrences:vulnerabilitySummary"
          SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")

          TOTAL=$(echo "$SUMMARY" | jq '[(.counts // [])[] .totalCount | tonumber] | add')
          ([ "$TOTAL" -eq 0 ] && echo "pass=true"  >> "$GITHUB_OUTPUT") || \
          (echo "pass=false" >> "$GITHUB_OUTPUT")

      # --- PROMOTE only when scan passed ------------------------------------
      - name: Docker login secure registry
        if: steps.scan.outputs.pass == 'true'
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - id: promote
        if: steps.scan.outputs.pass == 'true'
        name: Copy image to secure registry
        env:
          QUAR:   ${{ env.QUAR_IMAGE_REGISTRY }}
          SECURE: ${{ env.SECURE_IMAGE_REGISTRY }}
        run: |
          SRC="${{ matrix.image }}"
          DST=$(echo "$SRC" | sed "s|$QUAR|$SECURE|" | sed "s/:insecure-/:secure-/")
          docker pull "$SRC"
          docker tag  "$SRC" "$DST"
          docker push "$DST"
          echo "dst=$DST" >> "$GITHUB_OUTPUT"

      - name: Push tag to GHCR
        if: steps.scan.outputs.pass == 'true'
        env:
          COMMIT_SHA: ${{ needs.build.outputs.commit_tag }}
          DST:        ${{ steps.promote.outputs.dst }}
        run: |
          COMPONENT=$(basename "$DST" | cut -d':' -f1)
          GHCR="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_SHA"
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker tag "$DST" "$GHCR"
          docker push "$GHCR"

      # Fail this matrix run when vulnerabilities exist
      - name: Mark failure if scan failed
        if: steps.scan.outputs.pass != 'true'
        run: exit 1
