name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git $REPO_NAME
          cd $REPO_NAME
          git checkout ${{ github.event.client_payload.sha }}

      - name: Simple Detect Changed Components
        id: detect-changes
        run: |
          cd $REPO_NAME
          
          # Extremely simplified version - just look for any Dockerfiles
          echo "Looking for Dockerfiles..."
          DOCKERFILES=$(find . -name "Dockerfile" | sort)
          echo "Found Dockerfiles:"
          echo "$DOCKERFILES"
          
          # Get the directories of these Dockerfiles
          DOCKER_DIRS=""
          for df in $DOCKERFILES; do
            dir=$(dirname "$df")
            # Get parent/child format if possible
            if [[ "$dir" == *"/"* ]]; then
              parent_child=$(echo "$dir" | sed -E 's|^\./([^/]+/[^/]+).*|\1|')
              DOCKER_DIRS="$DOCKER_DIRS $parent_child"
            fi
          done
          
          # Clean up the list
          DOCKER_DIRS=$(echo "$DOCKER_DIRS" | tr ' ' '\n' | sort | uniq | grep -v "^\s*$" || echo "")
          
          echo "Docker directories:"
          echo "$DOCKER_DIRS"
          
          # Write to output
          {
            echo "changed_services<<EOF"
            echo "$DOCKER_DIRS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Images
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          
          # Debug output
          echo "Changed services from previous step:"
          echo "${{ steps.detect-changes.outputs.changed_services }}"
          
          # Only proceed if we have changed services
          if [ -z "${{ steps.detect-changes.outputs.changed_services }}" ]; then
            echo "No services to build. Exiting."
            exit 0
          fi
          
          # Loop through each service
          echo "${{ steps.detect-changes.outputs.changed_services }}" | while read SERVICE; do
            if [ -z "$SERVICE" ]; then
              continue
            fi
            
            echo "Building $SERVICE..."
            
            if [ ! -f "$SERVICE/Dockerfile" ]; then
              echo "Warning: $SERVICE/Dockerfile not found. Skipping."
              continue
            fi
            
            SERVICE_NAME=$(echo "$SERVICE" | cut -d'/' -f2)
            COMMIT_TAG="${{ github.event.client_payload.sha }}"
            FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
            
            # Build image
            docker build -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG" \
                        -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG" \
                        "$SERVICE"
            
            # Push images
            docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG"
            docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG"
            
            echo "Successfully built and pushed $SERVICE_NAME"
          done