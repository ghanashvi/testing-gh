# name: Build Process

# on:
#   repository_dispatch:
#     types: [app-code-change]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout CI Orchestration Repo
#         uses: actions/checkout@v3

#       - name: Clone Source Repository
#         run: |
#           REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
#           git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git $REPO_NAME
#           cd $REPO_NAME
#           git checkout ${{ github.event.client_payload.sha }}

#       - name: Detect Changed Components
#         id: detect-changes
#         run: |
#           cd $REPO_NAME
#           # Create an empty file to store changes
#           touch changes.txt
          
#           # Check if this is the first commit
#           if git rev-parse HEAD~1 &>/dev/null; then
#             # Normal flow - previous commit exists
#             PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
            
#             # Find which directories with Dockerfiles have changed
#             git diff --name-only $PREVIOUS_COMMIT HEAD | grep -o '^[^/]*/[^/]*' | sort | uniq | while read dir; do
#               if [ -f "${dir}/Dockerfile" ]; then
#                 echo "${dir}" >> changes.txt
#               fi
#             done
            
#             # Find which directories with service files have changed
#             git diff --name-only $PREVIOUS_COMMIT HEAD | grep -E '\.(yaml|yml|json)$' | grep -E 'service|deployment|config' | grep -o '^[^/]*/[^/]*' | sort | uniq >> changes.txt
#           else
#             # First-time run - consider all Dockerfiles
#             echo "First-time run detected - processing all components"
            
#             find . -name "Dockerfile" | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
            
#             # Add service files
#             find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) | grep -E 'service|deployment|config' | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
#           fi
          
#           # Get unique entries
#           ALL_CHANGES=$(sort changes.txt | uniq | grep -v '^$')
          
#           # Output the changed services
#           echo "Changed services and configs: $ALL_CHANGES"
#           echo "changed_services<<EOF" >> $GITHUB_OUTPUT
#           echo "$ALL_CHANGES" >> $GITHUB_OUTPUT
#           echo "EOF" >> $GITHUB_OUTPUT

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build and Push Images to Quarantine
#         run: |
#           REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          
#           # Debug: Show what we're working with
#           echo "Changed services from previous step:"
#           echo "${{ steps.detect-changes.outputs.changed_services }}"
          
#           # Loop through each identified service and build/push its Docker image
#           echo "${{ steps.detect-changes.outputs.changed_services }}" | while read SERVICE; do
#             if [ -z "$SERVICE" ]; then
#               continue
#             fi
            
#             if [ -f "$SERVICE/Dockerfile" ]; then
#               echo "Building $SERVICE..."
              
#               SERVICE_NAME=$(echo $SERVICE | cut -d'/' -f2)
#               COMMIT_TAG=\${{ github.event.client_payload.sha }}"
#               FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
              
#               # Build image with tags
#               docker build -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG" \
#               -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG" \
#               \$SERVICE"
              
#               # Push images to Google Artifact Registry in Quarantine Project
#               # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG"
#               # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG"
              
#               echo "Successfully built and pushed $SERVICE_NAME to Quarantine Project"
#             else
#               echo "Warning: $SERVICE/Dockerfile not found. Skipping."
#             fi
#           done


name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git $REPO_NAME
          cd $REPO_NAME
          git checkout ${{ github.event.client_payload.sha }}

      - name: Show Modified Files
        run: |
          cd $REPO_NAME
          
          echo "## Files Modified in this Commit:" >> $GITHUB_STEP_SUMMARY
          
          if git rev-parse HEAD~1 &>/dev/null; then
            # If previous commit exists, show diff
            PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
            MODIFIED_FILES=$(git diff --name-only $PREVIOUS_COMMIT HEAD)
            
            if [ -z "$MODIFIED_FILES" ]; then
              echo "No files were modified in this commit." >> $GITHUB_STEP_SUMMARY
            else
              echo "The following files were modified:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$MODIFIED_FILES" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            # First commit - list all files
            echo "First commit - listing all files in repository:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git ls-files | head -n 100 >> $GITHUB_STEP_SUMMARY
            if [ $(git ls-files | wc -l) -gt 100 ]; then
              echo "... and $(( $(git ls-files | wc -l) - 100 )) more files" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Detect Changed Components
        id: detect-changes
        run: |
          cd $REPO_NAME
          # Create an empty file to store changes
          touch changes.txt
          
          # Check if this is the first commit
          if git rev-parse HEAD~1 &>/dev/null; then
            # Normal flow - previous commit exists
            PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
            
            # Find which directories with Dockerfiles have changed - exclude hidden dirs
            git diff --name-only $PREVIOUS_COMMIT HEAD | grep -v "^\." | grep -o '^[^/]*/[^/]*' | sort | uniq | while read dir; do
              if [ -f "${dir}/Dockerfile" ]; then
                echo "${dir}" >> changes.txt
              fi
            done
            
            # Find which directories with service files have changed - exclude hidden dirs
            git diff --name-only $PREVIOUS_COMMIT HEAD | grep -v "^\." | grep -E '\.(yaml|yml|json)$' | grep -E 'service|deployment|config' | grep -o '^[^/]*/[^/]*' | sort | uniq >> changes.txt
          else
            # First-time run - consider all Dockerfiles - exclude hidden dirs
            echo "First-time run detected - processing all components"
            
            # Exclude hidden directories and focus on your code structure
            find . -name "Dockerfile" -not -path "*/\.*" | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
            
            # Add service files - exclude hidden directories
            find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) -not -path "*/\.*" | grep -E 'service|deployment|config' | grep -o '^\./[^/]*/[^/]*' | sed 's/^\.//' | sort | uniq >> changes.txt
          fi
          
          # Get unique entries
          ALL_CHANGES=$(sort changes.txt | uniq | grep -v '^$')
          
          # Output the changed services
          echo "Changed services and configs: $ALL_CHANGES"
          echo "changed_services<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Images to Quarantine
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          
          # Debug: Show what we're working with
          echo "Changed services from previous step:"
          echo "${{ steps.detect-changes.outputs.changed_services }}"
          
          # Loop through each identified service and build/push its Docker image
          echo "${{ steps.detect-changes.outputs.changed_services }}" | while read SERVICE; do
            if [ -z "$SERVICE" ]; then
              continue
            fi
            
            if [ -f "$SERVICE/Dockerfile" ]; then
              echo "Building $SERVICE..."
              
              SERVICE_NAME=$(echo $SERVICE | cut -d'/' -f2)
              COMMIT_TAG="${{ github.event.client_payload.sha }}"
              FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
              
              # Build image with tags
              docker build -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG" \
                          -t "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG" \
                          "$SERVICE"
              
              # Push images to Google Artifact Registry in Quarantine Project
              # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$COMMIT_TAG"
              # docker push "gcr.io/quarantine-project/$REPO_NAME/$SERVICE_NAME:$FEATURE_TAG"
              
              echo "Successfully built and pushed $SERVICE_NAME to Quarantine Project"
            else
              echo "Warning: $SERVICE/Dockerfile not found. Skipping."
            fi
          done

      - name: List Created Docker Images
        run: |
          echo "## Docker Images Created:" >> $GITHUB_STEP_SUMMARY
          
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          
          # List all images in the gcr.io/quarantine-project namespace
          IMAGES=$(docker images "gcr.io/quarantine-project/$REPO_NAME/*" --format "{{.Repository}}:{{.Tag}}")
          
          if [ -z "$IMAGES" ]; then
            echo "No images were created in this run." >> $GITHUB_STEP_SUMMARY
          else
            echo "The following images were created:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$IMAGES" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi