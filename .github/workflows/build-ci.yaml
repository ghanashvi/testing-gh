name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git \$REPO_NAME\
          cd "$REPO_NAME\
          git checkout \${{ github.event.client_payload.sha }}"

      - name: Detect Changed Files
        id: detect-changes
        run: |
          REPO_NAME=$(echo \${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          cd "$REPO_NAME"

          # Handle first commit case
          if git rev-parse HEAD^1 >/dev/null 2>&1; then
            # Not the first commit, get previous commit hash
            PREVIOUS_COMMIT=$(git rev-parse HEAD^1)
            
            # Find all directories containing Dockerfiles that were modified
            CHANGED_DOCKER_DIRS=$(git diff --name-only \$PREVIOUS_COMMIT" \${{ github.event.client_payload.sha }}" | grep -E '(^|/)Dockerfile$|Dockerfile\.' | xargs -I{} dirname {} | sort -u)
            
            # If no Dockerfile was changed, check if any file was changed in directories containing Dockerfiles
            if [ -z "$CHANGED_DOCKER_DIRS" ]; then
              # Find all directories with Dockerfiles
              DOCKER_DIRS=$(find . -name "Dockerfile" -o -name \Dockerfile.*" | xargs -I{} dirname {} | sort -u)
              
              # Check if any files in these directories were changed
              for DIR in $DOCKER_DIRS; do
                CHANGED_FILES=$(git diff --name-only "$PREVIOUS_COMMIT" "${{ github.event.client_payload.sha }}" -- "$DIR")
                if [ -n "$CHANGED_FILES" ]; then
                CHANGED_DOCKER_DIRS="$CHANGED_DOCKER_DIRS $DIR\
                fi
              done
            fi
          else
            # First commit, consider all Dockerfiles as changed
            CHANGED_DOCKER_DIRS=$(find . -name \Dockerfile" -o -name "Dockerfile.*" | xargs -I{} dirname {} | sort -u)
            echo "First commit detected, building all Dockerfiles\
          fi
          
          # Store the list as a GitHub environment variable (comma-separated)
          echo "DOCKER_DIRS_CSV=$(echo $CHANGED_DOCKER_DIRS | tr ' ' ',')" >> $GITHUB_ENV
          
          # Output for debugging
          echo \Changed Docker directories: $CHANGED_DOCKER_DIRS"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Changed Images
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          COMMIT_TAG="${{ github.event.client_payload.sha }}"
          FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
          
          # Convert comma-separated list back to space-separated
          CHANGED_DIRS=$(echo "$DOCKER_DIRS_CSV" | tr ',' ' ')
          
          # Check if there are any changed Docker directories
          if [ -z "$CHANGED_DIRS\ ]; then
            echo "No Dockerfile changes detected. Skipping build."
            exit 0
          fi
          
          # Process each changed directory
          for DIR in $CHANGED_DIRS; do
            if [ -z "$DIR\]; then
              continue
            fi
            
            # Extract component name from directory path (last segment)
            COMPONENT=$(basename "$DIR")
            
            # If root directory, use the repo name as component
            if [ \$DIR" = "." ]; then
              COMPONENT=$REPO_NAME
            fi
            
            # Find Dockerfile in the directory
            DOCKERFILE=$(find \$DIR" -maxdepth 1 -name \Dockerfile" -o -name "Dockerfile.*" | head -n 1)
            
            if [ -n "$DOCKERFILE" ]; then
              echo "Building Docker image for component: $COMPONENT..."
              
              # Build image with tags
              docker build -f "$DOCKERFILE\ \
                         -t \us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG" \
                         -t "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG" \
                         \$DIR"
              
              # Push images to Google Artifact Registry
              docker push \us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"
              docker push "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG\
              
              echo "Successfully built and pushed $REPO_NAME-$COMPONENT to Quarantine Repository"
            else
              echo "Warning: No Dockerfile found in $DIR. Skipping build."
            fi
          done

      - name: Trigger Security Scanning
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_PAT }}
          repository: ${{ github.repository }}
          event-type: start-security-scanning
          client-payload: '{
            \repository": "${{ github.event.client_payload.repository }}\
            "sha": "${{ github.event.client_payload.sha }}",
            "ref": "${{ github.event.client_payload.ref }}"
          }'
