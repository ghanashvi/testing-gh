name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is available

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          git clone --depth=1 https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git "$REPO_NAME"
          cd "$REPO_NAME"
          git fetch --depth=2 origin "${{ github.event.client_payload.ref }}"
          git checkout "${{ github.event.client_payload.sha }}"

      - name: Detect Changed Files
        id: detect-changes
        run: |
          cd "$REPO_NAME"

          # Fetch the latest two commits to ensure the ability to diff
          git fetch --prune --unshallow

          # Use current commit SHA from event payload
          CURRENT_SHA="${{ github.event.client_payload.sha }}"
          PREVIOUS_COMMIT=$(git rev-parse "${CURRENT_SHA}^")

          # Find directories with Dockerfiles that had changes
          CHANGED_DOCKER_DIRS=$(git diff --name-only "$PREVIOUS_COMMIT" "$CURRENT_SHA" | grep -E '(^|/)Dockerfile(\.|$)' | xargs -I{} dirname {} | sort -u)

          # If no Dockerfiles were directly changed, see if changes exist in their directories
          if [ -z "$CHANGED_DOCKER_DIRS" ]; then
            # Find all directories containing Dockerfiles
            DOCKER_DIRS=$(find . -name "Dockerfile" -o -name "Dockerfile.*" | xargs -I{} dirname {} | sort -u)

            # Check for changes in these directories
            for DIR in $DOCKER_DIRS; do
              CHANGES=$(git diff --name-only "$PREVIOUS_COMMIT" "$CURRENT_SHA" -- "$DIR")
              if [ -n "$CHANGES" ]; then
                CHANGED_DOCKER_DIRS="$CHANGED_DOCKER_DIRS $DIR"
              fi
            done
          fi

          # Export list of changed directories
          echo "CHANGED_DOCKER_DIRS=$(echo $CHANGED_DOCKER_DIRS)" >> $GITHUB_ENV
          echo "Changed Docker directories: $CHANGED_DOCKER_DIRS"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Changed Images
        run: |
          # Retrieve the list of changed Docker directories
          CHANGED_DOCKER_DIRS="${{ env.CHANGED_DOCKER_DIRS }}"
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          COMMIT_TAG="${{ github.event.client_payload.sha }}"
          FEATURE_TAG=$(echo "${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')

          # Check if there are any changed Docker directories
          if [ -z "$CHANGED_DOCKER_DIRS" ]; then
            echo "No Dockerfile changes detected. Skipping build."
            exit 0
          fi

          # Process each changed directory
          for DIR in $CHANGED_DOCKER_DIRS; do
            # Extract component name based on directory structure
            COMPONENT=$(basename "$DIR")

            # Locate Dockerfile in the directory
            DOCKERFILE=$(find "$DIR" -maxdepth 1 -name "Dockerfile" -o -name "Dockerfile.*" | head -n 1)

            if [ -n "$DOCKERFILE" ]; then
              echo "Building Docker image for component: $COMPONENT..."

              # Build the image using appropriate tags
              docker build -f "$DOCKERFILE" \
                           -t "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG" \
                           -t "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG" \
                           "$DIR"

              # Push images to Google Artifact Registry
              docker push "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"
              docker push "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME-$COMPONENT:insecure-$FEATURE_TAG"

              echo "Successfully built and pushed $REPO_NAME-$COMPONENT to Quarantine Repository"
            else
              echo "Warning: No Dockerfile found in $DIR. Skipping build."
            fi
          done

      - name: Trigger Security Scanning
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_PAT }}
          repository: ${{ github.repository }}
          event-type: start-security-scanning
          client-payload: >-
            {
              "repository": "${{ github.event.client_payload.repository }}",
              "sha": "${{ github.event.client_payload.sha }}",
              "ref": "${{ github.event.client_payload.ref }}"
            }