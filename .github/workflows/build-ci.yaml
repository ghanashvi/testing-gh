name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      - name: Clone Source Repository
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git $REPO_NAME
          cd $REPO_NAME
          git checkout ${{ github.event.client_payload.sha }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Image
        run: |
          REPO_NAME=$(echo ${{ github.event.client_payload.repository }} | cut -d'/' -f2)
          COMMIT_TAG="${{ github.event.client_payload.sha }}\FEATURE_TAG=$(echo \${{ github.event.client_payload.ref }}" | sed 's|refs/heads/||')
          
          # Simplified approach - check for Dockerfile in repo root
          if [ -f \$REPO_NAME/Dockerfile" ]; then
            echo "Building Docker image for $REPO_NAME...\
            # Build image with tags - using the correct
            docker push "us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo/$REPO_NAME:insecure-$FEATURE_TAG"
            
            echo "Successfully built and pushed $REPO_NAME to Quarantine Repository\else
            echo "Error: Dockerfile not found in repository root. Aborting."
            exit 1
          fi
