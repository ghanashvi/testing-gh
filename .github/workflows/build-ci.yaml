# name: Build Process

# on:
#   repository_dispatch:
#     types: [app-code-change]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       id-token: write

#     env:
#       WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
#       SERVICE_ACCOUNT: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'
#       IMAGE_REGISTRY: 'us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo'

#     steps:
#       - name: Checkout CI Orchestration Repo
#         uses: actions/checkout@v3

#       - name: Clone Source Repository
#         id: clone_repo
#         run: |
#           REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
#           git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git "$REPO_NAME"
#           cd "$REPO_NAME"
#           git checkout "${{ github.event.client_payload.sha }}"
#           echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"

#       - name: Detect Changed Docker Components
#         id: detect-changes
#         uses: tj-actions/changed-files@v44
#         with:
#           path: ${{ steps.clone_repo.outputs.REPO_NAME }}
#           files: |
#             **/Dockerfile
#             **/Dockerfile.*
#             **/Dockerfile-*
#             **/*.py

#       - name: Prepare Docker Build Contexts
#         id: prepare-docker-contexts
#         run: |
#           CHANGED_FILES="${{ steps.detect-changes.outputs.all_changed_files }}"
#           echo "Changed files: $CHANGED_FILES"
#           cd "${{ steps.clone_repo.outputs.REPO_NAME }}" || exit

#           # Identify specific changed Dockerfiles among the changed files
#           TARGET_DOCKERFILES=$(echo "$CHANGED_FILES" | grep -E 'Dockerfile.*')

#           echo "Dockerfiles to build: $TARGET_DOCKERFILES"
#           echo "TARGET_DOCKERFILES=$TARGET_DOCKERFILES" >> $GITHUB_ENV

#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v1
#         with:
#           workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
#           service_account: ${{ env.SERVICE_ACCOUNT }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Setup gcloud CLI
#         uses: google-github-actions/setup-gcloud@v1

#       - name: Configure Docker for Artifact Registry
#         run: |
#           gcloud auth configure-docker us-central1-docker.pkg.dev

#       - name: Build and Push Changed Docker Images
#         run: |
#           set -e
#           REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
#           COMMIT_TAG="${{ github.event.client_payload.sha }}"

#           TARGET_DOCKERFILES="${{ env.TARGET_DOCKERFILES }}"
#           echo "Dockerfiles to build: $TARGET_DOCKERFILES"

#           cd "$REPO_NAME" || exit
#           for DOCKERFILE in $TARGET_DOCKERFILES; do
#             [ -z "$DOCKERFILE" ] && continue

#             DIR=$(dirname "$DOCKERFILE")
#             COMPONENT=$(basename "$DOCKERFILE" | sed 's/Dockerfile-//; s/Dockerfile//')
#             COMPONENT=${COMPONENT:-default}

#             echo "Building component: $COMPONENT using Dockerfile: $DOCKERFILE"

#             docker build -f "$DOCKERFILE" \
#               -t "${{ env.IMAGE_REGISTRY }}/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG" \
#               "$DIR"

#             docker push "${{ env.IMAGE_REGISTRY }}/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"

#             echo "Successfully built and pushed $REPO_NAME-$COMPONENT"
#           done


name: Build Process

on:
  repository_dispatch:
    types: [app-code-change]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      WORKLOAD_IDENTITY_PROVIDER: 'projects/906017862008/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
      SERVICE_ACCOUNT: 'ci-image-builder@axial-edition-463510-p5.iam.gserviceaccount.com'
      IMAGE_REGISTRY: 'us-central1-docker.pkg.dev/axial-edition-463510-p5/quarantine-repo'

    steps:
      # ------------------------------------------------------------------ #
      - name: Checkout CI Orchestration Repo
        uses: actions/checkout@v3

      # ------------------------------------------------------------------ #
      - name: Clone Source Repository
        id: clone_repo
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          git clone https://x-access-token:${{ secrets.CI_PAT }}@github.com/${{ github.event.client_payload.repository }}.git "$REPO_NAME"
          cd "$REPO_NAME"
          git checkout "${{ github.event.client_payload.sha }}"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------------ #
      - name: Detect Changed Docker Components
        id: detect-changes
        uses: tj-actions/changed-files@v44
        with:
          # ✅ FIX 1: point the diff at the cloned repo’s root
          path: ${{ steps.clone_repo.outputs.REPO_NAME }}

          # ✅ FIX 2: first‑run fallback — Git’s empty tree object
          base_sha: ${{ github.event.before || '4b825dc642cb6eb9a060e54bf8d69288fbee4904' }}
          sha: ${{ github.event.client_payload.sha }}

          files: |
            **/Dockerfile
            **/Dockerfile.*
            **/Dockerfile-*
            **/*.py

      # ------------------------------------------------------------------ #
      - name: Prepare Docker Build Contexts
        id: prepare-docker-contexts
        run: |
          CHANGED_FILES="${{ steps.detect-changes.outputs.all_changed_files }}"
          echo "Changed files: $CHANGED_FILES"
          cd "${{ steps.clone_repo.outputs.REPO_NAME }}" || exit

          # Identify changed Dockerfiles, convert newlines → spaces
          TARGET_DOCKERFILES=$(echo "$CHANGED_FILES" | grep -E 'Dockerfile' | tr '\n' ' ')
          echo "Dockerfiles to build: $TARGET_DOCKERFILES"

          # ✅ FIX 3: export as space‑separated string (loop stays unchanged)
          echo "TARGET_DOCKERFILES=$TARGET_DOCKERFILES" >> $GITHUB_ENV

      # ------------------------------------------------------------------ #
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # ------------------------------------------------------------------ #
      - name: Build and Push Changed Docker Images
        run: |
          set -e
          REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          COMMIT_TAG="${{ github.event.client_payload.sha }}"
          TARGET_DOCKERFILES="${{ env.TARGET_DOCKERFILES }}"

          cd "$REPO_NAME" || exit
          for DOCKERFILE in $TARGET_DOCKERFILES; do
            [ -z "$DOCKERFILE" ] && continue

            DIR=$(dirname "$DOCKERFILE")
            COMPONENT=$(basename "$DOCKERFILE" | sed 's/Dockerfile[-\.]*//')
            COMPONENT=${COMPONENT:-default}

            echo "Building component: $COMPONENT using Dockerfile: $DOCKERFILE"

            docker build -f "$DOCKERFILE" \
              -t "${{ env.IMAGE_REGISTRY }}/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG" \
              "$DIR"

            docker push "${{ env.IMAGE_REGISTRY }}/$REPO_NAME-$COMPONENT:insecure-$COMMIT_TAG"

            echo "Successfully built and pushed $REPO_NAME-$COMPONENT"
          done
